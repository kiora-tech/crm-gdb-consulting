{% extends 'base.html.twig' %}

{% block title %}Créer un événement{% endblock %}

{% block body %}
<div class="pagetitle">
    <h1>Créer un événement pour {{ customer.name }}</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="{{ path('homepage') }}">Accueil</a></li>
            <li class="breadcrumb-item"><a href="{{ path('app_customer_index') }}">Clients</a></li>
            <li class="breadcrumb-item"><a href="{{ path('app_customer_show', {id: customer.id}) }}">{{ customer.name }}</a></li>
            <li class="breadcrumb-item active">Créer un événement</li>
        </ol>
    </nav>
</div>

<section class="section">
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Informations de l'événement</h5>

                    {{ form_start(form) }}
                        <div class="row mb-3">
                            <label for="contact" class="col-sm-3 col-form-label">{{ form_label(form.contact) }}</label>
                            <div class="col-sm-9">
                                {{ form_widget(form.contact) }}
                                {{ form_errors(form.contact) }}
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="title" class="col-sm-3 col-form-label">{{ form_label(form.title) }}</label>
                            <div class="col-sm-9">
                                {{ form_widget(form.title) }}
                                {{ form_errors(form.title) }}
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="description" class="col-sm-3 col-form-label">{{ form_label(form.description) }}</label>
                            <div class="col-sm-9">
                                {{ form_widget(form.description) }}
                                {{ form_errors(form.description) }}
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="startDateTime" class="col-sm-3 col-form-label">{{ form_label(form.startDateTime) }}</label>
                            <div class="col-sm-9">
                                {{ form_widget(form.startDateTime) }}
                                {{ form_errors(form.startDateTime) }}
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="endDateTime" class="col-sm-3 col-form-label">{{ form_label(form.endDateTime) }}</label>
                            <div class="col-sm-9">
                                {{ form_widget(form.endDateTime) }}
                                {{ form_errors(form.endDateTime) }}
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="location" class="col-sm-3 col-form-label">{{ form_label(form.location) }}</label>
                            <div class="col-sm-9">
                                {{ form_widget(form.location) }}
                                {{ form_errors(form.location) }}
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="category" class="col-sm-3 col-form-label">{{ form_label(form.category) }}</label>
                            <div class="col-sm-9">
                                {{ form_widget(form.category) }}
                                {{ form_errors(form.category) }}
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-9 offset-sm-3">
                                <twig:FormActions
                                    backRoute="app_customer_show"
                                    :backRouteParams="{'id': customer.id}"
                                    :showDelete="false"
                                />
                            </div>
                        </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Informations</h5>
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i>
                        L'événement sera créé dans votre calendrier Microsoft et sera synchronisé automatiquement.
                    </div>
                    <p class="small text-muted">
                        <strong>Client :</strong> {{ customer.name }}
                    </p>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .category-select option {
            padding-left: 25px;
        }
        .category-color-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
            vertical-align: middle;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('turbo:load', function() {
            const contactSelect = document.getElementById('calendar_event_contact');
            const titleInput = document.getElementById('calendar_event_title');
            const descriptionTextarea = document.getElementById('calendar_event_description');
            const categorySelect = document.getElementById('calendar_event_category');
            const startDateTimeInput = document.getElementById('calendar_event_startDateTime');
            const endDateTimeInput = document.getElementById('calendar_event_endDateTime');
            const customerId = {{ customer.id }};

            if (contactSelect && titleInput && descriptionTextarea) {
                contactSelect.addEventListener('change', function() {
                    const selectedOption = this.options[this.selectedIndex];

                    if (this.value) {
                        // Get data attributes from selected option
                        const firstName = selectedOption.dataset.firstName || '';
                        const lastName = selectedOption.dataset.lastName || '';
                        const phone = selectedOption.dataset.phone || '';
                        const customerName = selectedOption.dataset.customerName || '';
                        const contactId = selectedOption.dataset.contactId || '';

                        // Build title: "Nom établissement - Nom du contact - Téléphone"
                        let title = customerName;
                        if (firstName || lastName) {
                            title += ' - ' + firstName + ' ' + lastName;
                        }
                        if (phone) {
                            title += ' - ' + phone;
                        }
                        titleInput.value = title.trim();

                        // Build description with contact URL
                        const contactUrl = window.location.origin + '/contact/' + contactId + '/edit';
                        descriptionTextarea.value = 'Fiche contact: ' + contactUrl;
                    } else {
                        // Clear fields if no contact selected
                        titleInput.value = '';
                        descriptionTextarea.value = '';
                    }
                });
            }

            // Auto-set end date to 30 minutes after start date
            if (startDateTimeInput && endDateTimeInput) {
                startDateTimeInput.addEventListener('change', function() {
                    if (this.value) {
                        const startDate = new Date(this.value);
                        const endDate = new Date(startDate.getTime() + 30 * 60000); // Add 30 minutes

                        // Format date to datetime-local input format (YYYY-MM-DDTHH:mm)
                        const year = endDate.getFullYear();
                        const month = String(endDate.getMonth() + 1).padStart(2, '0');
                        const day = String(endDate.getDate()).padStart(2, '0');
                        const hours = String(endDate.getHours()).padStart(2, '0');
                        const minutes = String(endDate.getMinutes()).padStart(2, '0');

                        endDateTimeInput.value = `${year}-${month}-${day}T${hours}:${minutes}`;
                    }
                });
            }

            // Add color indicators to category select options
            if (categorySelect) {
                // Create a wrapper div to hold the select with colored badge
                const wrapper = document.createElement('div');
                wrapper.style.position = 'relative';
                categorySelect.parentNode.insertBefore(wrapper, categorySelect);
                wrapper.appendChild(categorySelect);

                // Create color indicator element
                const colorIndicator = document.createElement('span');
                colorIndicator.className = 'category-color-indicator';
                colorIndicator.style.position = 'absolute';
                colorIndicator.style.left = '10px';
                colorIndicator.style.top = '50%';
                colorIndicator.style.transform = 'translateY(-50%)';
                colorIndicator.style.pointerEvents = 'none';
                colorIndicator.style.zIndex = '1';
                wrapper.appendChild(colorIndicator);

                // Update color indicator based on selection
                function updateColorIndicator() {
                    const selectedOption = categorySelect.options[categorySelect.selectedIndex];
                    const color = selectedOption?.dataset?.color || 'transparent';
                    colorIndicator.style.backgroundColor = color;
                    colorIndicator.style.display = categorySelect.value ? 'inline-block' : 'none';
                }

                categorySelect.addEventListener('change', updateColorIndicator);
                updateColorIndicator();

                // Add left padding to select to make room for indicator
                categorySelect.style.paddingLeft = '30px';
            }
        });
    </script>
{% endblock %}
